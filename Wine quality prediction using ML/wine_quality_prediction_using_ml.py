# -*- coding: utf-8 -*-
"""wine quality prediction using ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A3tdSZj7ikxmbvfPgNm_pvHkgqfDpbv4

# Understanding the problem statement
we need to build a ML model which can predict the quality of wine for a wine manufacturing company.

###Importing the libraries and dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

wine_df = pd.read_csv('/content/winequality-red.csv')

wine_df.head(2)

wine_df.shape

wine_df.info()
# as we can see all data types are in correct formate and no missing values

wine_df.describe()

"""### Data Visualization"""

# count plot for different quality value

sns.catplot(x='quality', data = wine_df, kind= 'count')

# volatile acedity vs quality
plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data= wine_df)
# so lesser the value of volatile acidity more will be quality of wine

# fixed acidity vs quality
plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='fixed acidity', data= wine_df)
# fixed acidity has almost similar value for all quality

# we can see correlation matrix
correlation_matrics = wine_df.corr()

plt.figure(figsize=(8,5))
sns.heatmap(correlation_matrics, annot=True, fmt='.2f', cmap='coolwarm', linewidths=.5)
plt.title('correlation matrics')
plt.show()

# so we can say
'''Quality is positive related to
1.alcohol
2.sulphate
3.citric acid
4.residual sugar
5.fixed acidity
rest quality is negatively related '''

"""### Data preparation"""

X = wine_df.drop(columns='quality', axis=1)
Y = wine_df['quality']

X.head(2)

"""### Label binarisation
this will convert our output column with two output
"""

Y = wine_df['quality'].apply(lambda x: 1 if x>=7 else 0)

Y.sample(5)

# train-test split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""### Model training"""

model = RandomForestClassifier()
model.fit(X_train,Y_train)

"""### Model evaluation"""

# Training Accuracy score
training_prediction = model.predict(X_train)
training_accuracy = accuracy_score(training_prediction, Y_train)
print('Training accuracy :',training_accuracy )

# Testing Accuracy score
testing_prediction = model.predict(X_test)
testing_accuracy = accuracy_score(testing_prediction, Y_test)
print('Testing accuracy :',testing_accuracy )

"""### making prediction system"""

input_data = (7.5,0.5,0.36,6.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

input_data=(7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')

