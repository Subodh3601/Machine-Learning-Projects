# -*- coding: utf-8 -*-
"""Sonar Rock vs Mine prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o5ZoUxZImigA12YvofrlABc0VOOAe0rK

# understanding the problem statement
we need to make a ML model which can identify the rock and mine under water
by using the SONAR data

# Importing libraries and dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

sonar_df = pd.read_csv('/content/Copy of sonar data.csv', header=None)

sonar_df.head(3)

sonar_df.shape

sonar_df.info()

# statistical summery
sonar_df.describe()

sonar_df[60].value_counts()

sonar_df.groupby(60).mean()

# seperating data and label
X = sonar_df.drop(columns=60, axis = 1)
Y = sonar_df[60]

X.head(2)

Y.head(2)

# splitting into training and test data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=10)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

"""# Model training = Logistic regression"""

model = LogisticRegression()
# training
model.fit(X_train,Y_train)

"""# Model Evaluation"""

# calculating accuracy score
training_prediction = model.predict(X_train)
training_accuracy = accuracy_score(training_prediction, Y_train)
print('Accuracy score for training data : ',training_accuracy)

testing_prediction = model.predict(X_test)
testing_accuracy = accuracy_score(testing_prediction, Y_test)
print('Accuracy score for testing data : ',testing_accuracy)

"""# Making a predictive system"""

input_data = (0.1313,0.2339,0.3059,0.4264,0.4010,0.1791,0.1853,0.0055,0.1929,0.2231,0.2907,0.2259,0.3136,0.3302,0.3660,0.3956,0.4386,0.4670,0.5255,0.3735,0.2243,0.1973,0.4337,0.6532,0.5070,0.2796,0.4163,0.5950,0.5242,0.4178,0.3714,0.2375,0.0863,0.1437,0.2896,0.4577,0.3725,0.3372,0.3803,0.4181,0.3603,0.2711,0.1653,0.1951,0.2811,0.2246,0.1921,0.1500,0.0665,0.0193,0.0156,0.0362,0.0210,0.0154,0.0180,0.0013,0.0106,0.0127,0.0178,0.0231)

# Changing the dataytpe to numpy array
input_data_array = np.asarray(input_data)
# reshaping our data
input_data_reshaped = input_data_array.reshape(1,-1)
# pridicting the value

prediction = model.predict(input_data_reshaped)
print(prediction)

if prediction[0]=='R':
  print('Object is ROCK')
else:
  print('Object is MINE')

input_data = (0.0181,0.0146,0.0026,0.0141,0.0421,0.0473,0.0361,0.0741,0.1398,0.1045,0.0904,0.0671,0.0997,0.1056,0.0346,0.1231,0.1626,0.3652,0.3262,0.2995,0.2109,0.2104,0.2085,0.2282,0.0747,0.1969,0.4086,0.6385,0.7970,0.7508,0.5517,0.2214,0.4672,0.4479,0.2297,0.3235,0.4480,0.5581,0.6520,0.5354,0.2478,0.2268,0.1788,0.0898,0.0536,0.0374,0.0990,0.0956,0.0317,0.0142,0.0076,0.0223,0.0255,0.0145,0.0233,0.0041,0.0018,0.0048,0.0089,0.0085)
input_data_array = np.asarray(input_data)
input_data_reshaped = input_data_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if prediction[0]=='R':
  print('Object is a ROCK')
else:
  print('Object is a MINE')

